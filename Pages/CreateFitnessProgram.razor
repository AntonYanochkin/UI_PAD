@page "/create-fitness-program"
@using UI.Models
@using Microsoft.AspNetCore.Components.Authorization
@inject IWorkoutService WorkoutService
@inject AuthenticationStateProvider AuthenticationStateProvider
@using UI.Services
@using System.Security.Claims

<h3>Create a New Workout Program</h3>
<div class="container">
    <AuthorizeView Context="authContext">
        <Authorized>
            <EditForm Model="NewWorkoutProgram" OnValidSubmit="SubmitForm">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <label for="name" class="form-label">Name</label>
                    <InputText id="name" class="form-control" @bind-Value="NewWorkoutProgram.Name" />
                </div>

                <div class="mb-3">
                    <label for="description" class="form-label">Description</label>
                    <InputTextArea id="description" class="form-control" @bind-Value="NewWorkoutProgram.Description" />
                </div>

                <div class="mb-3">
                    <label for="content" class="form-label">Content</label>
                    <InputTextArea id="content" class="form-control" @bind-Value="NewWorkoutProgram.Content" />
                </div>

                <div class="mb-3">
                    <label for="level" class="form-label">Difficulty Level</label>
                    <InputSelect id="level" class="form-control" @bind-Value="NewWorkoutProgram.Level">
                        @foreach (DifficultyLevel level in Enum.GetValues(typeof(DifficultyLevel)))
                        {
                            <option value="@level">@level</option>
                        }
                    </InputSelect>
                </div>

                <div class="mb-3">
                    <label for="duration" class="form-label">Duration (Minutes)</label>
                    <InputNumber id="duration" class="form-control" @bind-Value="NewWorkoutProgram.DurationInMinutes" />
                </div>

                <!-- Убрали поле для даты, так как она будет подставляться автоматически -->
                <!-- Скрытое поле для UserId (не отображается на странице, но передается с данными формы) -->
                <input type="hidden" @bind="NewWorkoutProgram.UserId" />

                <button type="submit" class="btn btn-primary">Create Program</button>
            </EditForm>
        </Authorized>
        <NotAuthorized>
            <p>You need to <a href="login">log in</a> to create a program.</p>
        </NotAuthorized>
    </AuthorizeView>
</div>

@code {
    private WorkoutProgram NewWorkoutProgram = new WorkoutProgram();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userIdClaim = authState.User.FindFirst(c => c.Type == ClaimTypes.NameIdentifier);

        if (userIdClaim != null)
        {
            NewWorkoutProgram.UserId = userIdClaim.Value; // Assign userId from the current authenticated user
        }

        // Устанавливаем текущую дату в объект перед созданием программы
        NewWorkoutProgram.CreatedDate = DateTime.Now;
    }

    private async Task SubmitForm()
    {
        try
        {
            var createdProgram = await WorkoutService.CreateWorkoutProgramAsync(NewWorkoutProgram);
            Console.WriteLine($"Program created successfully: {createdProgram.Name}");

            // Reset the form
            NewWorkoutProgram = new WorkoutProgram
                {
                    CreatedDate = DateTime.Now
                };
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating program: {ex.Message}");
        }
    }
}
